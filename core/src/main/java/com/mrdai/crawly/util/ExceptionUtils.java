package com.mrdai.crawly.util;

import java.util.function.Supplier;

public final class ExceptionUtils {
    private static final StackTraceElement[] emptyTrace = new StackTraceElement[0];

    /**
     * Returns a {@code Throwable} with empty stack trace, generated by the given constructor.
     *
     * @param exceptionConstructor the given constructor of the expected {@code Throwable}.
     * @param <T> the expected type of the {@code Throwable}.
     * @return a {@code Throwable} with empty stack trace, generated by the given constructor.
     *
     * @throws NullPointerException if the given constructor is a {@code null} or returns a {@code null}.
     */
    public static <T extends Throwable> T emptyTraceException(Supplier<T> exceptionConstructor) {
        if (exceptionConstructor == null)
            throw new NullPointerException("The given exception constructor is null.");

        T exception = exceptionConstructor.get();
        if (exception == null)
            throw new NullPointerException("The given exception constructor produces a null.");

        exception.setStackTrace(emptyTrace);

        return exception;
    }

    /**
     * Returns a {@code Throwable} generated by the given constructor with empty stack trace and cause
     * initialized as the given {@code Throwable}.
     * <p>
     * The method uses {@link Throwable#initCause(Throwable)} to set the cause, which can only be called once.
     * If this method is already called within the given {@code Supplier} (explicitly or implicitly by
     * {@link Throwable#Throwable(Throwable)}, etc.), this will result to an {@code IllegalStateException}.
     *
     * @param exceptionConstructor the given constructor of the expected {@code Throwable}.
     * @param cause the given {@code Throwable} that will be initialized as the cause of the produced {@code Throwable}.
     * @param <T> the expected type of the {@code Throwable}.
     * @return a {@code Throwable} generated by the given constructor with empty stack trace and given cause.
     *
     * @throws NullPointerException if the given constructor is a {@code null} or returns a {@code null}.
     * @throws IllegalStateException if the produced exception's {@link Throwable#initCause(Throwable)} has already
     *                               been called within the given supplier.
     *
     * @see Throwable#initCause(Throwable)
     */
    public static <T extends Throwable> T emptyTraceException(Supplier<T> exceptionConstructor, Throwable cause) {
        T exception = emptyTraceException(exceptionConstructor);
        exception.initCause(cause);

        return exception;
    }

    private ExceptionUtils() {
        throw new AssertionError("ExceptionUtils should not be instantiated!");
    }
}
